/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull web'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 50
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/risklabs/Risk%20Labs/implementation/web)
 */

import * as amplitude from "@amplitude/analytics-browser"

export const ApiKey = {
  production: "",
  development: "",
  testing: ""
}

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration = {
  plan: {
    version: "50",
    branch: "main",
    source: "web",
    versionId: "5b6bde07-5ed3-4021-967f-fdaec4b35a87"
  },
  ...{
    ingestionMetadata: {
      sourceName: "browser-typescript-ampli",
      sourceVersion: "2.0.0"
    }
  }
}

export class Identify {
  event_type = amplitude.Types.SpecialEventType.IDENTIFY

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class ApplicationLoaded {
  event_type = "ApplicationLoaded"
}

export class ConnectWalletButtonClicked {
  event_type = "ConnectWalletButtonClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class DepositNetworkMismatch {
  event_type = "DepositNetworkMismatch"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class DisconnectWalletButtonClicked {
  event_type = "DisconnectWalletButtonClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class EarnByAddingLiquidityClicked {
  event_type = "EarnByAddingLiquidityClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class FeesInfoExpanded {
  event_type = "FeesInfoExpanded"
}

export class FromChainSelected {
  event_type = "FromChainSelected"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class MaxTokenAmountClicked {
  event_type = "MaxTokenAmountClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class MonitorDepositProgressClicked {
  event_type = "MonitorDepositProgressClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class PageViewed {
  event_type = "PageViewed"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class QuickSwapButtonClicked {
  event_type = "QuickSwapButtonClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class ToAccountChanged {
  event_type = "ToAccountChanged"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class ToChainSelected {
  event_type = "ToChainSelected"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class TokenSelected {
  event_type = "TokenSelected"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class TrackInExplorerClicked {
  event_type = "TrackInExplorerClicked"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class TransferDepositCompleted {
  event_type = "TransferDepositCompleted"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class TransferQuoteReceived {
  event_type = "TransferQuoteReceived"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class TransferSigned {
  event_type = "TransferSigned"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class TransferSubmitted {
  event_type = "TransferSubmitted"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class WalletConnectTransactionCompleted {
  event_type = "WalletConnectTransactionCompleted"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class WalletNetworkSelected {
  event_type = "WalletNetworkSelected"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class WalletSelected {
  event_type = "WalletSelected"

  constructor(event_properties) {
    this.event_properties = event_properties
    this.event_properties = event_properties
  }
}

export class WebVitals {
  event_type = "WebVitals"

  constructor(event_properties) {
    this.event_properties = event_properties
  }
}

const getVoidPromiseResult = () => ({ promise: Promise.resolve() })

// prettier-ignore
export class Ampli {
  disabled = false;

  get client() {
    this.isInitializedAndEnabled();
    return this.amplitude;
  }

  get isLoaded() {
    return this.amplitude != null;
  }

  isInitializedAndEnabled() {
    if (!this.amplitude) {
      console.error(
        'ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?'
      );
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options) {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn(
        'WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.'
      );
      return getVoidPromiseResult();
    }

    let apiKey = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error(
        "ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'"
      );
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId,
    properties,
    options,
  ) {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = { ...options, user_id: userId };
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude.identify(amplitudeIdentify, options);
  }

  /**
   * Flush the event.
   */
  flush() {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event, options) {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude.track(event, undefined, options);
  }

  /**
   * ApplicationLoaded
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ApplicationLoaded)
   *
   * App is loaded
   *
   * Owner: James Morris
   *
   * @param options Amplitude event options.
   */
  applicationLoaded(
    options,
  ) {
    return this.track(new ApplicationLoaded(), options);
  }

  /**
   * ConnectWalletButtonClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ConnectWalletButtonClicked)
   *
   * User clicks Connect Wallet
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  connectWalletButtonClicked(
    properties,
    options,
  ) {
    return this.track(new ConnectWalletButtonClicked(properties), options);
  }

  /**
   * DepositNetworkMismatch
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/DepositNetworkMismatch)
   *
   * This event tracks instances where a transfer deposit is attempted to a network that does not match the intended network
   *
   * @param properties The event's properties (e.g. fromChainId)
   * @param options Amplitude event options.
   */
  depositNetworkMismatch(
    properties,
    options,
  ) {
    return this.track(new DepositNetworkMismatch(properties), options);
  }

  /**
   * DisconnectWalletButtonClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/DisconnectWalletButtonClicked)
   *
   * User disconnects wallet
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  disconnectWalletButtonClicked(
    properties,
    options,
  ) {
    return this.track(new DisconnectWalletButtonClicked(properties), options);
  }

  /**
   * EarnByAddingLiquidityClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/EarnByAddingLiquidityClicked)
   *
   * This event tracks when a user clicks on the "Earn by Adding Liquidity" CTA within the application
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  earnByAddingLiquidityClicked(
    properties,
    options,
  ) {
    return this.track(new EarnByAddingLiquidityClicked(properties), options);
  }

  /**
   * FeesInfoExpanded
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/FeesInfoExpanded)
   *
   * User expands fees info
   *
   * Owner: James Morris
   *
   * @param options Amplitude event options.
   */
  feesInfoExpanded(
    options,
  ) {
    return this.track(new FeesInfoExpanded(), options);
  }

  /**
   * FromChainSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/FromChainSelected)
   *
   * User selects from chain
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. chainName)
   * @param options Amplitude event options.
   */
  fromChainSelected(
    properties,
    options,
  ) {
    return this.track(new FromChainSelected(properties), options);
  }

  /**
   * MaxTokenAmountClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/MaxTokenAmountClicked)
   *
   * User clicks max amount
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  maxTokenAmountClicked(
    properties,
    options,
  ) {
    return this.track(new MaxTokenAmountClicked(properties), options);
  }

  /**
   * MonitorDepositProgressClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/MonitorDepositProgressClicked)
   *
   * This event tracks when a user clicks on the "Monitor Progress" button within the application
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  monitorDepositProgressClicked(
    properties,
    options,
  ) {
    return this.track(new MonitorDepositProgressClicked(properties), options);
  }

  /**
   * PageViewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/PageViewed)
   *
   * User views page
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. gitCommitHash)
   * @param options Amplitude event options.
   */
  pageViewed(
    properties,
    options,
  ) {
    return this.track(new PageViewed(properties), options);
  }

  /**
   * QuickSwapButtonClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/QuickSwapButtonClicked)
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  quickSwapButtonClicked(
    properties,
    options,
  ) {
    return this.track(new QuickSwapButtonClicked(properties), options);
  }

  /**
   * ToAccountChanged
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ToAccountChanged)
   *
   * User changes recipient address
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. toWalletAddress)
   * @param options Amplitude event options.
   */
  toAccountChanged(
    properties,
    options,
  ) {
    return this.track(new ToAccountChanged(properties), options);
  }

  /**
   * ToChainSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ToChainSelected)
   *
   * User selects from or to chain
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. chainName)
   * @param options Amplitude event options.
   */
  toChainSelected(
    properties,
    options,
  ) {
    return this.track(new ToChainSelected(properties), options);
  }

  /**
   * TokenSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TokenSelected)
   *
   * User selects token
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. default)
   * @param options Amplitude event options.
   */
  tokenSelected(
    properties,
    options,
  ) {
    return this.track(new TokenSelected(properties), options);
  }

  /**
   * TrackInExplorerClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TrackInExplorerClicked)
   *
   * This event tracks when a user clicks on the "Track in explorer" button within the application
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  trackInExplorerClicked(
    properties,
    options,
  ) {
    return this.track(new TrackInExplorerClicked(properties), options);
  }

  /**
   * TransferDepositCompleted
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferDepositCompleted)
   *
   * On-chain transfer completed
   *
   * Owner: Dong-Ha Kim
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferDepositCompleted(
    properties,
    options,
  ) {
    return this.track(new TransferDepositCompleted(properties), options);
  }

  /**
   * TransferQuoteReceived
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferQuoteReceived)
   *
   * User recieves a quote for bridge transaction
   *
   * Owner: Dong-Ha Kim
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferQuoteReceived(
    properties,
    options,
  ) {
    return this.track(new TransferQuoteReceived(properties), options);
  }

  /**
   * TransferSigned
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferSigned)
   *
   * User signs wallet transaction
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferSigned(
    properties,
    options,
  ) {
    return this.track(new TransferSigned(properties), options);
  }

  /**
   * TransferSubmitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferSubmitted)
   *
   * User clicks send button
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferSubmitted(
    properties,
    options,
  ) {
    return this.track(new TransferSubmitted(properties), options);
  }

  /**
   * WalletConnectTransactionCompleted
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WalletConnectTransactionCompleted)
   *
   * User rejects or approves wallet connection
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. isReconnect)
   * @param options Amplitude event options.
   */
  walletConnectTransactionCompleted(
    properties,
    options,
  ) {
    return this.track(new WalletConnectTransactionCompleted(properties), options);
  }

  /**
   * WalletNetworkSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WalletNetworkSelected)
   *
   * Owner: Dong-Ha Kim
   *
   * @param properties The event's properties (e.g. chainId)
   * @param options Amplitude event options.
   */
  walletNetworkSelected(
    properties,
    options,
  ) {
    return this.track(new WalletNetworkSelected(properties), options);
  }

  /**
   * WalletSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WalletSelected)
   *
   * User selects wallet to connect
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  walletSelected(
    properties,
    options,
  ) {
    return this.track(new WalletSelected(properties), options);
  }

  /**
   * WebVitals
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WebVitals)
   *
   * Properties to track health of UI
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. cumulativeLayoutShift)
   * @param options Amplitude event options.
   */
  webVitals(
    properties,
    options,
  ) {
    return this.track(new WebVitals(properties), options);
  }
}

export const ampli = new Ampli()
